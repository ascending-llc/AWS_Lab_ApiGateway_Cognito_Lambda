---
AWSTemplateFormatVersion: 2010-09-09
Description: Create an intergrated ApiGateway with Lambda function, which will be authorized by AWS Cognito.
Parameters:
  EmailAddress:
    Type: String
    Description: The Email address to receive invitation message
  DomainName:
    Type: String
    Description: The Prefix of Domain Name
    Default: frugalops
  CallbackURL:
    Type: String
    Description: The Call back URL used for Cognito, it must be start with 'https://' or 'http://'
    Default: https://frugalops.com
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "lambda.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
  SampleLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Timeout: 60
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            return {
              'statusCode': 200,
              'body': 'My IP address is ' + event["requestContext"]["identity"]["sourceIp"],
              'headers': {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
              },
            }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
  PermissionForApiToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:*
      FunctionName: !Ref SampleLambda
      Principal: apigateway.amazonaws.com
  RestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref AWS::StackName
  ApiMethod:
    DependsOn:
      - SampleLambda
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiAuthorizer
      HttpMethod: GET
      Integration: 
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join
               - ''
               - - 'arn:aws:apigateway:'
                 - !Ref AWS::Region
                 - :lambda:path/2015-03-31/functions/
                 - !GetAtt SampleLambda.Arn
                 - /invocations
      ResourceId: !Ref ApiResource
      RestApiId: !Ref RestApi
  ApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt RestApi.RootResourceId
      PathPart: address
      RestApiId: !Ref RestApi
  ApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref NewApiDeployment
      RestApiId: !Ref RestApi
      StageName: ip
  NewApiDeployment:
    DependsOn:
      - ApiMethod
      - ApiResource
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RestApi
  ApiUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref AWS::StackName
  ApiUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      UserPoolId: !Ref ApiUserPool
  ApiIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      CognitoIdentityProviders: 
        - ClientId: !Ref ApiUserPoolClient
          ProviderName: !GetAtt ApiUserPool.ProviderName
      AllowUnauthenticatedIdentities: false
  CognitoRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Federated: 
                - "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
      Policies:
        - 
          PolicyName: "CognitoRolePolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - mobileanalytics:PutEvents
                  - cognito-sync:*
                Resource: "*"
  RoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties: 
      IdentityPoolId: !Ref ApiIdentityPool
      Roles:
        authenticated: !GetAtt CognitoRole.Arn
  CognitoUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: admin
      UserPoolId: !Ref ApiUserPool
      UserAttributes:
        - Name: email
          Value: !Ref EmailAddress
  ApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ApiAuthorizer
      RestApiId: !Ref RestApi
      Type: COGNITO_USER_POOLS
      ProviderARNs: 
        - !GetAtt ApiUserPool.Arn
      IdentitySource: method.request.header.Authorization
Outputs:
  InvokeURL:
    Value: !Join
             - ''
             - - https://
               - !Ref RestApi
               - .execute-api.
               - !Ref AWS::Region
               - .amazonaws.com/ip/address
  UserPoolId:
    Value: !Ref ApiUserPool
  ClientId:
    Value: !Ref ApiUserPoolClient
  IdentityPoolId:
    Value: !Ref ApiIdentityPool
  SignUpPage:
    Value: !Join
             - ''
             - - https://
               - !Ref DomainName
               - .auth.
               - !Ref AWS::Region
               - .amazoncognito.com/login?response_type=code&client_id=
               - !Ref ApiUserPoolClient
               - '&redirect_uri='
               - !Ref CallbackURL